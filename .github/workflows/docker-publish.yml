name: Build (amd64 and arm64) and push to quay registries

on:
  push:
    branches: ["main"]
    tags: ["v*.*.*"]
  pull_request:
    branches: ["main"]

  workflow_dispatch:

  repository_dispatch:
    types: [dependency-updated]

env:
  REGISTRY: localhost
  NAME: utility-container
  TAG: ${{ github.event_name == 'pull_request' && format('pr-{0}', github.event.pull_request.number) || (github.ref_name == 'main' && 'latest' || github.ref_name) }}

jobs:
  build-container:
    strategy:
      matrix:
        include:
          - targetarch: amd64
            runner: ubuntu-latest
          - targetarch: arm64
            runner: ubuntu-24.04-arm

    runs-on: ${{ matrix.runner }}
    permissions:
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Build container and save tarball
        run: |
          make ${{ matrix.targetarch }}
          buildah push ${{ env.CONTAINER }}-${{ matrix.targetarch }} docker-archive:/tmp/image-${{ matrix.targetarch }}.tar:${{ env.CONTAINER }}-${{ matrix.targetarch }}
        env:
          CONTAINER: ${{ env.NAME }}:${{ env.TAG }}

      - name: Upload image artifact
        uses: actions/upload-artifact@v4
        with:
          name: image-${{ matrix.targetarch }}-${{ github.run_id }}
          path: /tmp/image-${{ matrix.targetarch }}.tar
          retention-days: 1

  test-container:
    needs: [build-container]
    uses: ./.github/workflows/container-test.yml

  push-multiarch-manifest:
    needs: [test-container]
    # if: github.event_name != 'pull_request'
    strategy:
      matrix:
        include:
          - upload_registry: quay.io/validatedpatterns
            username_secret: QUAY_USERNAME
            password_secret: QUAY_PASSWORD
          - upload_registry: quay.io/hybridcloudpatterns
            username_secret: LEGACY_QUAY_USERNAME
            password_secret: LEGACY_QUAY_PASSWORD

    runs-on: ubuntu-latest
    permissions:
      contents: read
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Download AMD64 image
        uses: actions/download-artifact@v5
        with:
          name: image-amd64-${{ github.run_id }}
          path: /tmp

      - name: Download ARM64 image
        uses: actions/download-artifact@v5
        with:
          name: image-arm64-${{ github.run_id }}
          path: /tmp

      - name: Load tarballs into local containers-storage
        run: |
          buildah pull docker-archive:/tmp/image-amd64.tar
          buildah pull docker-archive:/tmp/image-arm64.tar

      - name: Log into Quay
        run: |
          buildah login -u ${{ env.USERNAME }} -p ${{ env.PASSWORD }} quay.io
        env:
          USERNAME: ${{ secrets[matrix.username_secret] }}
          PASSWORD: ${{ secrets[matrix.password_secret] }}

      # The compressed manifest in Quay has a different digest than the local so we
      # need to use skopeo to retrieve the correct digest for signing
      - name: Create manifest and push to Quay
        id: manifest-push
        run: |
          make manifest
          buildah manifest add --arch=amd64 "${{ env.LOCAL_IMAGE_NAME }}" "${{ env.LOCAL_IMAGE_NAME }}-amd64"
          buildah manifest add --arch=arm64 "${{ env.LOCAL_IMAGE_NAME }}" "${{ env.LOCAL_IMAGE_NAME }}-arm64"
          make upload
          DIGEST=$(skopeo inspect --format "{{.Digest}}" "docker://${{ env.UPLOADREGISTRY }}/${{ env.CONTAINER }}")
          echo "digest=$DIGEST" >> $GITHUB_OUTPUT
        env:
          UPLOADREGISTRY: ${{ matrix.upload_registry }}
          CONTAINER: ${{ env.NAME }}:${{ env.TAG }}

      - name: Install cosign
        uses: sigstore/cosign-installer@d58896d6a1865668819e1d91763c7751a165e159 # v3.9.2
        with:
          cosign-release: "v2.2.4"

      # Cosign expects the docker config.json for registry authentication so we must
      # copy it from buildah
      - name: Sign the published Docker image
        run: |
          cat ${XDG_RUNTIME_DIR}/containers/auth.json > ~/.docker/config.json
          cosign sign --yes ${{ matrix.upload_registry }}/${{ env.CONTAINER }}@${{ steps.manifest-push.outputs.digest }}
        env:
          CONTAINER: ${{ env.NAME }}:${{ env.TAG }}
